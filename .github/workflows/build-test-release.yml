name: CI

on:
  push:
    branches:
      - "main"
      - "develop"
      - "release/**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:

  fossa-scan:
    continue-on-error: true
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
          fossa analyze --debug
          fossa report attribution --format text > /tmp/THIRDPARTY
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
      - uses: actions/upload-artifact@v4
        with:
          name: THIRDPARTY
          path: /tmp/THIRDPARTY
      - run: |
          fossa test --debug
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
      - name: Check for failed steps for jobs with continue-on-error
        if: ${{ failure() }}
        run: echo "failed=true" >> $GITHUB_ENV

      - name: Set output if steps failed
        run: |
          echo "failed=${{ env.failed }}" >> $GITHUB_ENV
    outputs:
      failed: ${{ env.failed }}

  pre-commit:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.9"
          # - "3.13"  # there are issues to fix for this version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: pre-commit/action@v3.0.0


  semgrep:
    uses: splunk/sast-scanning/.github/workflows/sast-scan.yml@main
    secrets:
      SEMGREP_KEY: ${{ secrets.SEMGREP_PUBLISH_TOKEN }}

  compliance-copyrights:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: apache/skywalking-eyes@v0.6.0

  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version:
          - "3.7"
          # - "3.9"
          # - "3.13"
          # use version currently used in CI/CD pipelines
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.7"
      - run: curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
      - run: poetry install
      - name: Build UCC test
        run: |
          poetry build
      - uses: actions/upload-artifact@v4
        with:
          name: UCC-test-build
          path: dist/

  test-build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version:
          # - "3.7"
          - "3.9"
          - "3.13"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
      - run: poetry install
      - name: Build UCC test
        run: |
          poetry build
  
  test-unit:
    runs-on: ubuntu-22.04
    continue-on-error: true
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.9"
          - "3.13"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
      - run: |
          poetry install
          poetry run pytest tests/unit

  test-functional-flow:
    runs-on: ubuntu-22.04
    continue-on-error: true
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.9"
          - "3.13"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
      - run: |
          poetry install
          poetry run pytest -p pytester tests/functional/flow

  test-functional-feature:
    runs-on: ubuntu-22.04
    continue-on-error: true
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.9"
          - "3.13"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
      - run: |
          poetry install
          poetry run pytest tests/functional/feature

  test-cli-init:
    runs-on: ubuntu-22.04
    continue-on-error: true
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.9"
          - "3.13"
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v4
        with:
          name: UCC-test-build
          path: dist/
      - name: Clone Example TA
        run: |
          cd tests/functional/
          git clone https://github.com/splunk/splunk-example-ta.git
          cd splunk-example-ta
          ./scripts/run_locally.sh
          cd ..
          mkdir splunk-example-ta-test
          cd splunk-example-ta-test
          python -m venv .test
          source .test/bin/activate
          pip install ../../../dist/*.whl
          export MODINPUT_TEST_SPLUNK_HOST=localhost
          export MODINPUT_TEST_SPLUNK_PORT=8089
          export MODINPUT_TEST_SPLUNK_USERNAME=admin
          export MODINPUT_TEST_SPLUNK_PASSWORD_BASE64=$(ucc-test-modinput base64encode -s 'Chang3d!')
          export MODINPUT_TEST_EXAMPLE_API_KEY_BASE64=$(ucc-test-modinput base64encode -s 'super-secret-api-token')
          ucc-test-modinput init -o ../splunk-example-ta/output/Splunk_TA_Example/appserver/static/openapi.json
          pytest tests/ucc_modinput_functional

  test-cli-gen:
    runs-on: ubuntu-22.04
    continue-on-error: true
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.9"
          - "3.13"
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v4
        with:
          name: UCC-test-build
          path: dist/
      - name: Clone Example TA
        run: |
          cd tests/functional/
          git clone https://github.com/splunk/splunk-example-ta.git
          cd splunk-example-ta
          ./scripts/run_locally.sh
          python -m venv .test
          source .test/bin/activate
          pip install --force-reinstall ../../../dist/*.whl
          export MODINPUT_TEST_SPLUNK_HOST=localhost
          export MODINPUT_TEST_SPLUNK_PORT=8089
          export MODINPUT_TEST_SPLUNK_USERNAME=admin
          export MODINPUT_TEST_SPLUNK_PASSWORD_BASE64=$(ucc-test-modinput base64encode -s 'Chang3d!')
          export MODINPUT_TEST_EXAMPLE_API_KEY_BASE64=$(ucc-test-modinput base64encode -s 'super-secret-api-token')
          ucc-test-modinput gen
          pytest tests/ucc_modinput_functional

  release:
    needs:
      - build
      - compliance-copyrights
      - fossa-scan
      - test-unit
      - test-functional-flow
      - test-functional-feature
      - semgrep
      - pre-commit
      - test-build
      - test-cli-init
      - test-cli-gen
    runs-on: ubuntu-22.04
    if: "! github.event.pull_request.head.repo.fork "
    steps:
      - uses: actions/checkout@v4
        with:
          # Very important: semantic-release won't trigger a tagged
          # build if this is not set false
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: "3.7"
      - run: curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
      - uses: actions/download-artifact@v4
        with:
          name: THIRDPARTY
      - run: cp -f THIRDPARTY NOTICE
      - run: poetry install
      - id: semantic
        uses: splunk/semantic-release-action@v1.3
        with:
          git_committer_name: ${{ secrets.SA_GH_USER_NAME }}
          git_committer_email: ${{ secrets.SA_GH_USER_EMAIL }}
          gpg_private_key: ${{ secrets.SA_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.SA_GPG_PASSPHRASE }}
          extra_plugins: |
            semantic-release-replace-plugin
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}
      - if: ${{ steps.semantic.outputs.new_release_published == 'true' }}
        run: |
          poetry build
          poetry publish -n -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_TOKEN }}
