name: CI

on:
  push:
    branches:
      - "main"
      - "develop"
      - "release/**"
      - "hotfix/**"
      - "feat/**"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [ main, develop, "release/**" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:

  pre-commit:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.9"
          # - "3.13"  # there are issues to fix for this version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: pre-commit/action@v3.0.0

  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version:
          - "3.7"
          # - "3.9"
          # - "3.13"
          # use version currently used in CI/CD pipelines
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.7"
      - run: curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
      - run: poetry install
      - name: Build UCC test
        run: |
          poetry build
      - uses: actions/upload-artifact@v4
        with:
          name: UCC-test-build
          path: dist/

  test-build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version:
          # - "3.7"
          - "3.9"
          - "3.13"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
      - run: poetry install
      - name: Build UCC test
        run: |
          poetry build
  
  test-unit:
    runs-on: ubuntu-22.04
    continue-on-error: true
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.9"
          - "3.13"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
      - run: |
          poetry install
          poetry run pytest tests/unit

  test-cli-init:
    runs-on: ubuntu-22.04
    continue-on-error: true
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.9"
          - "3.13"
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v4
        with:
          name: UCC-test-build
          path: dist/
      - name: Clone Example TA
        run: |
          cd tests/functional/
          git clone https://github.com/splunk/splunk-example-ta.git
          cd splunk-example-ta
          ./scripts/run_locally.sh
          source .venv/bin/activate
          pip install ../../../dist/*.whl
          export MODINPUT_TEST_SPLUNK_HOST=localhost
          export MODINPUT_TEST_SPLUNK_PORT=8089
          export MODINPUT_TEST_SPLUNK_USERNAME=admin
          export MODINPUT_TEST_SPLUNK_PASSWORD_BASE64=$(ucc-test-modinput base64encode -s 'Chang3d!')
          export MODINPUT_TEST_EXAMPLE_API_KEY_BASE64=$(ucc-test-modinput base64encode -s 'super-secret-api-token')
          ucc-test-modinput init
          pytest tests/ucc_modinput_functional

  test-cli-gen:
    runs-on: ubuntu-22.04
    continue-on-error: true
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.9"
          - "3.13"
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v4
        with:
          name: UCC-test-build
          path: dist/
      - name: Clone Example TA
        run: |
          cd tests/functional/
          git clone https://github.com/splunk/splunk-example-ta.git
          mv for_splunk_example_ta/__init__.py splunk-example-ta/tests
          mv for_splunk_example_ta/ucc_modinput_functional splunk-example-ta/tests
          cd splunk-example-ta
          ./scripts/run_locally.sh
          source .venv/bin/activate
          pip install ../../../dist/*.whl
          export MODINPUT_TEST_SPLUNK_HOST=localhost
          export MODINPUT_TEST_SPLUNK_PORT=8089
          export MODINPUT_TEST_SPLUNK_USERNAME=admin
          export MODINPUT_TEST_SPLUNK_PASSWORD_BASE64=$(ucc-test-modinput base64encode -s 'Chang3d!')
          export MODINPUT_TEST_EXAMPLE_API_KEY_BASE64=$(ucc-test-modinput base64encode -s 'super-secret-api-token')
          ucc-test-modinput gen
          pytest tests/ucc_modinput_functional
