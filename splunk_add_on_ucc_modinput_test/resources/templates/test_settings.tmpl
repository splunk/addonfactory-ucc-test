import pytest
from typing import Optional, Dict
from splunk_add_on_ucc_modinput_test.functional.decorators import (
    bootstrap,
    attach,
    forge,
    forges,
)
from tests.ucc_modinput_functional.splunk.client import SplunkClient
from tests.ucc_modinput_functional.splunk.forges import (
    try_to_set_loglevel,
    set_loglevel,
    try_to_configure_proxy,
    configure_http_proxy,
    configure_socks5_proxy
)
from tests.ucc_modinput_functional.splunk.probes import (
    wait_for_proxy,
    same_proxy_configs,
    wait_for_loglevel,
)


@attach(forge(set_loglevel, loglevel="CRITICAL", probe=wait_for_loglevel))
def test_valid_loglevel(wait_for_loglevel: bool) -> None:
    assert wait_for_loglevel is True

@pytest.mark.parametrize(
    "overwrite,expected_error",
    [
        ({"proxy_url": "@#$%!*123"}, "Not matching the pattern: "),
        ({"proxy_port": "not-a-number"}, "Bad Request -- Invalid format for integer value"),        
    ],
)
@attach(forge(try_to_configure_proxy))
def test_proxy_validators__invalid_params(error: Optional[str], overwrite, expected_error) -> None:
    assert expected_error in error
