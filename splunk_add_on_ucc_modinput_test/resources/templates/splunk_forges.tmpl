from typing import Dict, Generator, List
from tests.ucc_modinput_functional.splunk.client import SplunkClient, SplunkApiError


def try_to_set_loglevel(
    splunk_client: SplunkClient, loglevel: str
) -> Generator[Dict[str, object], None, None]:
    # forge method that tries to configure TA log level using incorrect unsupported log level value.
    # the goal is to collect error message provided by the TA and pass it to corresponding test method for validation.
    # forges pass values to tests, probes and forges by storing key-value pairs in test artifactory that is achived by yielding key-value pairs in a form of dictionary.
    # in addition to error maessage forge yields expected log level value used by a probe to make sure (wait for) the desired loglevel value was indeed applied to TA's configuration.
    error = None
    old_loglevel = splunk_client.get_settings_logging().get("loglevel")
    assert (
        old_loglevel != loglevel
    ), f"Invalid initial conditions: loglevel is already set to {loglevel}"

    try:
        splunk_client.update_settings_logging(loglevel)
    except ValueError as e:
        error = str(e)

    yield dict(expected_loglevel=loglevel, error=error)

    # teardown
    if error is None:
        splunk_client.update_settings_logging(old_loglevel)


def set_loglevel(
    splunk_client: SplunkClient, loglevel: str
) -> Generator[Dict[str, object], None, None]:
    # Forge method that configures TA log level and passes it to the artifactory to be used by a probe to make sure (wait for) the desired loglevel value was indeed applied to TA's configuration..
    # It does not catch and pass any error messages, instead API exception causes forge crash handled by framework and turned into corresponding test fast fail.
    old_loglevel = splunk_client.get_settings_logging().get("loglevel")

    splunk_client.update_settings_logging(loglevel)

    yield dict(
        expected_loglevel=loglevel,
    )

    # teardown
    splunk_client.update_settings_logging(old_loglevel)


def try_to_configure_proxy(
    splunk_client: SplunkClient,
    exclude: List[str] = [],
    overwrite: Dict[str, object] = {},
) -> Generator[Dict[str, object], None, None]:
    # Forge method that tries to configure TA proxy using incorrect/unsupported proxy configuration.
    # Default proxy_config contains values that should pass API endpoint validation, however exclude ands overwtite arguments allow to delete and/or modify configuration values in order to fail validation and provoke exoected error message.
    # The goal is to collect error message and status_code provided by the TA API endpoint and pass it to corresponding test method for validation.
    # Forges pass values to tests, probes and forges by storing key-value pairs in test artifactory that is achived by yielding key-value pairs in a form of dictionary.
    # In addition to error maessage and status_code, forge yields expected proxy configuration used by a probe to make sure that (wait for) the desired proxy settings are indeed applied to TA's configuration.
    # At teardown section it only disables configured proxy. This is done instead of restoring previous configuration to avoid restoring not configured proxy state that always fails as some proxy fields are mandatory.

    error, status_code = None, None
    proxy_configs = {
        "proxy_enabled": "0",
        "proxy_port": "3128",
        "proxy_rdns": "1",
        "proxy_type": "http",
        "proxy_url": "localhost",
        "proxy_username": "some_user_name",
        "proxy_password": "some_password",
    }

    for field_name in exclude:
        proxy_configs.pop(field_name, None)

    proxy_configs.update(overwrite)

    try:
        splunk_client.update_settings_proxy(**proxy_configs)
    except SplunkApiError as e:
        error = e.error_message
        status_code = e.status
        print(f"proxy error: {status_code},  {e.error_message}")

    yield dict(
        expected_proxy=proxy_configs,
        error=error,
        status_code=status_code,
    )

    # teardown
    if error is None:
        proxy_configs["proxy_enabled"] = "0"
        splunk_client.update_settings_proxy(**proxy_configs)


def configure_proxy(
    splunk_client: SplunkClient,
    proxy_configs: Dict[str, str],
) -> Generator[Dict[str, object], None, None]:
    # Forge method that configures TA proxy and passes it to the artifactory to be used by a probe to make sure (wait for) the desired proxy settings are indeed applied to TA's configuration.
    # It does not catch and pass any error messages, instead API exception causes forge crash handled by framework and turned into corresponding test fast fail.
    # At teardown section it only disables configured proxy. This is done instead of restoring previous configuration to avoid restoring not configured proxy state that always fails as some proxy fields are mandatory.

    splunk_client.update_settings_proxy(**proxy_configs)

    yield dict(
        expected_proxy=proxy_configs,
    )

    # teardown
    proxy_configs["proxy_enabled"] = "0"
    splunk_client.update_settings_proxy(**proxy_configs)


def configure_socks5_proxy(splunk_client, valid=True):
    # Forge method that prepares socks5 proxy configuration while using configure_proxy forge for actual proxy update.
    # Based on test requirements this forge can create proxy with valid and invalid credentials. By default it configures proxy with valid credentials.
    # Proxy with invalid credentials can be useful for tests checking how TA handles incorrectly configured proxy and what error logs it creates to let users to quickly detect the issue. 
    proxy_configs = {
        "proxy_enabled": "1",
        "proxy_port": "1080",
        "proxy_rdns": "1",
        "proxy_type": "socks5",
        "proxy_url": splunk_client.config.proxy_http_url,
    }

    if valid:
        proxy_configs.update(
            {
                "proxy_password": splunk_client.config.proxy_socks5_password,
                "proxy_username": splunk_client.config.proxy_socks5_username,
            }
        )
    else:
        proxy_configs.update(
            {
                "proxy_password": "invalid-proxy-password",
                "proxy_username": "invalid-proxy-username",
            }
        )

    yield from configure_proxy(splunk_client, proxy_configs)


def configure_http_proxy(splunk_client, valid=True):
    # Forge method that prepares socks5 proxy configuration while using configure_proxy forge for actual proxy update.
    # Based on test requirements this forge can create proxy with valid and invalid credentials. By default it configures proxy with valid credentials.
    # Proxy with invalid credentials can be useful for tests checking how TA handles incorrectly configured proxy and what error logs it creates to let users to quickly detect the issue. 
    proxy_configs = {
        "proxy_enabled": "1",
        "proxy_port": "3128",
        "proxy_rdns": "1",
        "proxy_type": "http",
        "proxy_url": splunk_client.config.proxy_http_url,
    }

    if valid:
        proxy_configs.update(
            {
                "proxy_password": splunk_client.config.proxy_http_password,
                "proxy_username": splunk_client.config.proxy_http_username,
            }
        )
    else:
        proxy_configs.update(
            {
                "proxy_password": "invalid-proxy-password",
                "proxy_username": "invalid-proxy-username",
            }
        )

    yield from configure_proxy(splunk_client, proxy_configs)
