import pytest
from typing import Optional, Dict
from splunk_add_on_ucc_modinput_test.functional.decorators import (
    bootstrap,
    attach,
    forge,
    forges,
)
from tests.ucc_modinput_functional.splunk.client import SplunkClient
from tests.ucc_modinput_functional.splunk.forges.settings import (
    try_to_set_loglevel,
    set_loglevel,
    try_to_configure_proxy,
    configure_http_proxy,
    configure_socks5_proxy
)
from tests.ucc_modinput_functional.splunk.probes.settings import (
    wait_for_proxy,
    same_proxy_configs,
    wait_for_loglevel,
)


@attach(forge(set_loglevel, loglevel="CRITICAL", probe=wait_for_loglevel))
def test_valid_loglevel(splunk_client: SplunkClient, expected_loglevel: str) -> None:
    loglevel = splunk_client.get_settings_logging().get("agent")
    assert loglevel == expected_loglevel

@pytest.mark.parametrize(
    "overwrite,expected_error",
    [
        ({"proxy_type": "unsupported"}, "Error in validating proxy configuration"),
        ({"proxy_url": "@#$%!*123"}, 'All of the following errors need to be fixed: ["Not matching the pattern: ^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\\\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$"]'),
        ({"proxy_port": "not-a-number"}, "Invalid format for numeric value"),        
    ],
)
@attach(forge(try_to_configure_proxy))
def test_proxy_validators__invalid_params(error: Optional[str], overwrite, expected_error) -> None:
    assert expected_error in error
